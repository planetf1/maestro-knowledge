name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast feedback job - runs first for quick results
  fast-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]  # Reduced for speed

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Create virtual environment
      run: |
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run fast tests (unit + integration)
      run: |
        ./test.sh fast

    - name: Upload fast test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fast-test-results-${{ matrix.python-version }}
        path: |
          .pytest_cache/
        retention-days: 7

  # Comprehensive test job
  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: fast-tests  # Run after fast tests pass
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Create virtual environment
      run: |
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run all tests
      run: |
        ./test.sh mcp

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          htmlcov/
        retention-days: 7

  # Service test validation (timeout protection)
  service-tests:
    runs-on: ubuntu-latest
    needs: fast-tests
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Create virtual environment
      run: |
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Test service timeout protection
      run: |
        # Test that service tests handle unreachable databases gracefully
        export MILVUS_URI="http://fake-server:19530"
        export WEAVIATE_URL="http://fake-weaviate:8080" 
        export WEAVIATE_API_KEY="fake-key"
        export MILVUS_RESYNC_TIMEOUT=3
        export WEAVIATE_RESYNC_TIMEOUT=3
        timeout 30s ./test.sh service

    - name: Upload service test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: service-test-results
        path: |
          .pytest_cache/
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-lint-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-lint-

    - name: Create virtual environment
      run: |
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run linting
      run: |
        uv run ruff check src/ tests/ examples/
        uv run ruff format --check src/ tests/ examples/

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-security-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-security-

    - name: Create virtual environment
      run: |
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run security checks
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
